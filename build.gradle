// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "conf.gradle"

buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        jcenter()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.1'
        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath("com.tencent.tinker:tinker-patch-gradle-plugin:${tinkerVersion}")
//        classpath "com.tencent.tinker:tinker-patch-gradle-plugin:${tinkerVersion}"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    apply from: "$rootProject.projectDir/subModuleHeader.gradle"
    repositories {
        flatDir { dirs 'libs' }
    }
}

subprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        jcenter()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }
}




task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * 配置阶段开始前的监听回调
 */
beforeEvaluate {}

/**
 * 配置阶段完成以后的回调
 */
afterEvaluate {
    //计算build的时长
//    def startBuildTime
//    def preBuildTask = tasks.getByName('preBuild')
//    preBuildTask?.doFirst {
//        startBuildTime = System.currentTimeMillis()
//    }
//    def buildTask = tasks.getByName('build')
//    buildTask?.doLast {
//        def endBuildTime = System.currentTimeMillis()
//        prinltn "the build time is：${endBuildTime - startBuildTime}"
//    }

    def dragon = file('bear')
    println dragon.text
}



/**
 * gradle执行完毕后的回调监听
 */
gradle.buildFinished {}

/**
 *
 *
 * task执行
 *
 *
 */
task taskX {
    doLast {
        prinltn 'taskX'
    }
}

task taskY {
    doLast {
        prinltn 'taskY'
    }
}

task taskZ(dependsOn: [taskX, taskY]) {
    //在所有lib task执行后执行
//    dependsOn tasks.findAll {
//        it.name.startsWith('lib')
//    }

    doLast {
        prinltn 'taskZ'

    }
}

//taskZ.dependsOn(taskX, taskY)

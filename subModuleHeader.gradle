ext.moduleName = getName()
ext.isModuleIndependent = moduleName == singleModuleKey.toString()


def applyPlugin = {
    if (isModuleIndependent) {
        apply plugin: 'com.android.application'
    } else {
        apply plugin: 'com.android.library'
    }
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
}

def commonConfigure = {
    android {
        compileSdkVersion rootProject.ext.android.compileSdkVersion
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        defaultConfig {
            minSdkVersion rootProject.ext.android.minSdkVersion
            targetSdkVersion rootProject.ext.android.targetSdkVersion
            versionCode rootProject.ext.android.versionCode
            versionName rootProject.ext.android.versionName
            multiDexEnabled true
            javaCompileOptions {
                annotationProcessorOptions.includeCompileClasspath = true
            }
        }
        buildTypes {
            release {
                minifyEnabled false
                consumerProguardFiles 'proguard-rules.pro'
            }
        }
        sourceSets {
            main {
                jniLibs.srcDirs = ['libs']
            }
        }
        lintOptions {
            checkReleaseBuilds false
            abortOnError false
        }
    }
}

def appConfigure = {
    if (isModuleIndependent) {
        android.with {
            signingConfigs {
                config {
                    keyAlias 'towards'
                    keyPassword 'towards123'
                    storeFile file('towards_store.jks')
                    storePassword 'towards123'
                }
            }

            buildTypes {
                release {
                    //签名配置
                    signingConfig = signingConfigs.config
                    //混淆打开
                    minifyEnabled false
                    //ZipAlign优化
                    zipAlignEnabled false
                    //移除无用的resource文件 资源压缩
                    shrinkResources false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), project.file('proguard-rules.pro')
                }
                debug {
                    //签名配置
                    signingConfig = signingConfigs.config
                    applicationIdSuffix ".debug"
                }
            }

            dexOptions {
                javaMaxHeapSize "12g"
                jumboMode true
                preDexLibraries false
            }
        }
    }
}

ext.globleConfigure = {
    try {
        applyPlugin()
        commonConfigure()
        appConfigure()
        println "配置完成---------------${moduleName}-------------------"
    } catch (Exception e) {
        throw new Exception("android app configure 配置出错，详情e：" + e.getMessage())
    }
}